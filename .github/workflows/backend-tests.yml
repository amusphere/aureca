name: Backend Tests

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

env:
  PYTHON_VERSION: '3.12'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "backend/uv.lock"

    - name: Install dependencies
      run: uv sync --frozen

    - name: Create test database directory
      run: mkdir -p /tmp/test_db

    - name: Run backend tests
      run: uv run pytest --tb=short -v

    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/pytest-report.xml
          backend/htmlcov/
        retention-days: 30

  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "backend/uv.lock"

    - name: Install dependencies
      run: uv sync --frozen

    - name: Run linting (ruff)
      run: uv run ruff check . --output-format=github

    - name: Run type checking (mypy)
      run: uv run mypy . --ignore-missing-imports

  backend-coverage:
    name: Backend Coverage
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "backend/uv.lock"

    - name: Install dependencies
      run: uv sync --frozen

    - name: Create test database directory
      run: mkdir -p /tmp/test_db

    - name: Run tests with coverage
      run: |
        uv run pytest \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-report.xml \
          --tb=short \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-coverage-results
        path: |
          backend/coverage.xml
          backend/htmlcov/
        retention-days: 30

  backend-status:
    name: Backend Status
    runs-on: ubuntu-latest
    needs: [backend-tests, backend-lint, backend-coverage]
    if: always()

    steps:
    - name: Check backend results
      run: |
        echo "## Backend Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.backend-tests.result }}" = "success" ]; then
          echo "✅ **Backend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Backend Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.backend-lint.result }}" = "success" ]; then
          echo "✅ **Backend Linting**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Backend Linting**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.backend-coverage.result }}" = "success" ]; then
          echo "✅ **Backend Coverage**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Backend Coverage**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: ${{ needs.backend-lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: ${{ needs.backend-coverage.result }}" >> $GITHUB_STEP_SUMMARY

    - name: Check overall backend status
      run: |
        if [ "${{ needs.backend-tests.result }}" = "success" ] && \
           [ "${{ needs.backend-lint.result }}" = "success" ] && \
           [ "${{ needs.backend-coverage.result }}" = "success" ]; then
          echo "🎉 All backend checks passed!"
          exit 0
        else
          echo "💥 Some backend checks failed!"
          exit 1
        fi
