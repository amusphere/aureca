name: Overall Status Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  status-check:
    name: Overall Status Check
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for other workflows
      uses: lewagon/wait-on-check-action@v1.3.4
      with:
        ref: ${{ github.ref }}
        check-name: 'Backend Status'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10
        allowed-conclusions: success,failure,cancelled,skipped

    - name: Wait for frontend workflow
      uses: lewagon/wait-on-check-action@v1.3.4
      with:
        ref: ${{ github.ref }}
        check-name: 'Frontend Status'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10
        allowed-conclusions: success,failure,cancelled,skipped

    - name: Get workflow runs
      uses: actions/github-script@v7
      id: get-workflows
      with:
        script: |
          const { data: workflows } = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head_sha: context.sha,
            status: 'completed'
          });

          const backendWorkflow = workflows.workflow_runs.find(run =>
            run.name === 'Backend Tests' && run.head_sha === context.sha
          );

          const frontendWorkflow = workflows.workflow_runs.find(run =>
            run.name === 'Frontend Tests' && run.head_sha === context.sha
          );

          return {
            backend: backendWorkflow ? backendWorkflow.conclusion : 'not_found',
            frontend: frontendWorkflow ? frontendWorkflow.conclusion : 'not_found'
          };

    - name: Create status summary
      run: |
        echo "## 🚀 Overall Project Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This check provides an overall status for the entire project." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check if files were changed
        if git diff --name-only HEAD^ HEAD | grep -q "^backend/"; then
          echo "📁 **Backend changes detected**" >> $GITHUB_STEP_SUMMARY
        else
          echo "📁 **No backend changes**" >> $GITHUB_STEP_SUMMARY
        fi

        if git diff --name-only HEAD^ HEAD | grep -q "^frontend/"; then
          echo "📁 **Frontend changes detected**" >> $GITHUB_STEP_SUMMARY
        else
          echo "📁 **No frontend changes**" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Workflow Status" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Tests: See [Backend Tests workflow](../../actions/workflows/backend-tests.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Tests: See [Frontend Tests workflow](../../actions/workflows/frontend-tests.yml)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*This status check will pass if no critical failures occur in individual workflows.*" >> $GITHUB_STEP_SUMMARY

  docker-build-check:
    name: Docker Build Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'docker-compose.yml') || contains(github.event.pull_request.changed_files, 'Dockerfile')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Docker Compose configuration
      run: |
        # Check if docker-compose.yml is valid
        docker compose config
        echo "✅ Docker Compose configuration is valid"

    - name: Test Docker build (dry run)
      run: |
        # Test that Docker containers can be built
        docker compose build --dry-run
        echo "✅ Docker build configuration is valid"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
